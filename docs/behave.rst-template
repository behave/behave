==============
Using *behave*
==============

The command-line tool *behave* has a bunch of `command-line arguments`_ and is
also configurable using `configuration files`_.

Values defined in the configuration files are used as defaults which the
command-line arguments may override.


Command-Line Arguments
======================

You may see the same information presented below at any time using ``behave
-h``.

{cmdline}


Tag Expression
--------------

{tag_expression}


.. _docid.behave.configuration-files:

Configuration Files
===================

Configuration files for *behave* are called either ".behaverc", "behave.ini",
"setup.cfg", "tox.ini", or "pyproject.toml" (your preference) and are located
in one of three places:

1. the current working directory (good for per-project settings),
2. your home directory ($HOME), or
3. on Windows, in the %APPDATA% directory.

If you are wondering where *behave* is getting its configuration defaults
from you can use the "-v" command-line argument and it'll tell you.

Configuration files **must** start with the label "[behave]" and are
formatted in the Windows INI style, for example:

.. code-block:: ini

    [behave]
    default_format = plain
    default_tags = not (@xfail or @not_implemented)
    junit = true
    junit_directory = build/behave.reports
    logging_level = WARNING

Alternatively, if using "pyproject.toml" instead (note the "tool." prefix):

.. code-block:: toml

    [tool.behave]
    default_format = "plain"
    default_tags = "not (@xfail or @not_implemented)"
    junit = true
    junit_directory = "build/behave.reports"
    logging_level = "WARNING"

NOTE: toml does not support `'%'` interpolations.

Configuration File Parameter Types
----------------------------------

The following types are supported (and used):

**text**
    This just assigns whatever text you supply to the configuration setting.

**bool**
    This assigns a boolean value to the configuration setting.
    The text describes the functionality when the value is true.
    True values are "1", "yes", "true", and "on".
    False values are "0", "no", "false", and "off".
    TOML: toml only accepts its native `true`

**sequence<text>**
    These fields accept one or more values on new lines, for example a tag
    expression might look like:

    .. code-block:: ini

        default_tags= (@foo or not @bar) and @zap

    which is the equivalent of the command-line usage::

        --tags="(@foo or not @bar) and @zap"

    TOML: toml can use arrays natively.


Configuration File Parameters
-----------------------------

{config}

Additional Configuration File Sections
--------------------------------------

Section: behave.userdata
~~~~~~~~~~~~~~~~~~~~~~~~~~~

This section is used to define user-specific paramters (aka: userdata)
for the config.userdata dictionary.

.. code-block:: ini
    :caption: FILE: behave.ini

    [behave.userdata]
    foo = Alice
    bar = Bon

Alternatively, if using "pyproject.toml":

.. code-block:: toml
    :caption: FILE: pyproject.toml

    [tool.behave.userdata]
    foo = "Alice"
    bar = "Bob"

which is the equivalent of the command-line usage:

.. code-block:: shell
    :caption: SHELL

    behave -D foo=Alice -D bar=Bob ...

See :doc:`userdata` for usage examples, type conversion and advanced use cases.


Section: behave.formatters
~~~~~~~~~~~~~~~~~~~~~~~~~~~

This configuration file section is used to:

* Define aliases for own formatters
* Override the mapping of builtin formatters

.. code-block:: ini
    :caption: FILE: behave.ini

    [behave.formatters]
    allure = allure_behave.formatter:AllureFormatter
    html   = behave_html_formatter:HTMLFormatter
    html-pretty = behave_html_pretty_formatter:PrettyHTMLFormatter

.. code-block:: toml
    :caption: FILE: pyproject.toml

    [tool.behave.formatters]
    allure = "allure_behave.formatter:AllureFormatter"
    html   = "behave_html_formatter:HTMLFormatter"
    html-pretty = "behave_html_pretty_formatter:PrettyHTMLFormatter"

You can then use this formatter alias on the command-line (or in the config-file):

.. code-block:: shell
    :caption: SHELL

    behave -f html --output=report.html ...

See :ref:`id.appendix.formatters` for more information.


Section: behave.runners
~~~~~~~~~~~~~~~~~~~~~~~~~~~

This configuration file section is used to:

* Define aliases for own test runners
* Override the mapping of builtin test runners

.. code-block:: ini
    :caption: FILE: behave.ini

    [behave.runners]
    mine = behave4me.runner:SuperDuperRunner

.. code-block:: toml
    :caption: FILE: pyproject.toml

    [behave.runners]
    mine = "behave4me.runner:SuperDuperRunner"

You can then use this runner alias on the command-line:

.. code-block:: shell
    :caption: SHELL

    behave --runner=mine ...

See :ref:`id.appendix.runners` for more information.

